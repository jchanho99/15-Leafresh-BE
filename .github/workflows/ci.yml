name: Backend CI

on:
  push:
    branches: [ "develop", "main" ]
  pull_request:
    branches: [ "develop", "main" ]

jobs:
  setup:
    name: Setup JDK and Grant Gradle Permission
    runs-on: ubuntu-latest
    outputs:
      gradle_cache_hit: ${{ steps.cache-gradle.outputs.cache-hit }}
    steps:
      - uses: actions/checkout@v3
      - name: Setup JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: 'oracle'
          java-version: 21
      - name: Grant Gradle permission
        run: chmod +x ./gradlew
      - name: Cache Gradle Wrapper
        uses: actions/cache@v3
        id: cache-gradle-wrapper
        with:
          path: ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-wrapper-${{ hashFiles('gradle/wrapper/gradle-wrapper.properties') }}
      - name: Cache Gradle dependencies
        uses: actions/cache@v3
        id: cache-gradle
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('build.gradle.kts', 'build.gradle') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

  # lint:
  #   name: Lint
  #   needs: setup
  #   if: github.ref == 'refs/heads/develop' || github.base_ref == 'develop'
  #   runs-on: ubuntu-latest
  #   defaults:
  #     run:
  #       working-directory: ./
  #   steps:
  #     - uses: actions/checkout@v3 # 필요하다면 유지
  #     - name: Checkstyle
  #       run: ./gradlew checkstyleMain

  unit-test:
    name: Unit Test
    needs: setup
    if: github.ref == 'refs/heads/develop' || github.base_ref == 'develop'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./
    steps:
      - uses: actions/checkout@v3 # 필요하다면 유지
      - name: Run Tests
        run: ./gradlew test

  integration-test:
    name: Integration Test
    needs: setup
    if: github.base_ref == 'main' && github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./
    steps:
      - uses: actions/checkout@v3

      - name: Build Spring Boot App
        run: ./gradlew bootJar

      - name: Start Spring Boot App
        run: |
          nohup java -jar build/libs/*.jar > app.log 2>&1 &
          echo "Waiting for Spring Boot to be healthy..."
          for i in {1..60}; do
            status=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8080 || echo "000")
            if [ "$status" = "200" ] || [ "$status" = "401" ]; then
              echo "✅ App is ready (HTTP $status)"
              exit 0
            fi
            echo "⏳ ($i/60) status=$status"
            sleep 1
          done
          echo "❌ App did not start in time"
          echo "--- app.log ---"
          cat app.log
          exit 1

      - name: Integration Test
        run: |
          curl -v http://localhost:8080/api/challenges/group/categories || (
            echo "❌ API call failed"; 
            cat app.log;
            exit 1
          )

      - name: Stop Spring Boot App
        run: pkill -f 'java -jar'
        
  build-dev:
    name: Build and Push Backend Docker (develop only)
    needs: [unit-test, setup]
    if: github.ref == 'refs/heads/develop' || github.base_ref == 'develop'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./
    steps:
      - uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container 
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}
      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: jchanho99/backend-dev:latest
          cache-from: type=gha,scope=build-backend-dev
          cache-to: type=gha,mode=max,scope=build-backend-dev

  build-prod:
    name: Build and Push Backend Docker (main only PR)
    needs: [integration-test, setup]
    if: github.base_ref == 'main' && github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./
    steps:
      - uses: actions/checkout@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}
      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: jchanho99/backend-prod:latest
          cache-from: type=gha,scope=build-backend-prod
          cache-to: type=gha,mode=max,scope=build-backend-prod
