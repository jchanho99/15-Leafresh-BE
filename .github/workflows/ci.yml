name: Backend CI

on:
  push:
    branches: [ "develop", "main" ]
  pull_request:
    branches: [ "develop", "main" ]
    types: [opened, synchronize, reopened, closed]

jobs:
  unit-test:                                    # 단위 테스트를 수행하는 Job (develop 브랜치 PR 대상)
    name: Unit Test
    if: github.event_name == 'pull_request' && github.base_ref == 'develop'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./
    steps:
      - uses: actions/checkout@v3              # 소스코드 체크아웃

      - name: Set up JDK 21                    # Java 21 환경 설정
        uses: actions/setup-java@v3
        with:
          distribution: 'oracle'
          java-version: 21

      - name: Grant Gradle permission          # gradlew 실행 권한 부여
        run: chmod +x ./gradlew

      - name: Cache Gradle dependencies        # Gradle 캐시로 빌드 속도 향상
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('build.gradle.kts', 'build.gradle') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Run Tests                        # 단위 테스트 실행
        run: ./gradlew test

  integration-test:                             # 통합 테스트 수행 (main 브랜치 PR 대상)
    name: Integration Test
    if: github.event_name == 'pull_request' && github.base_ref == 'main'
    runs-on: ubuntu-latest

    services:                                   # MySQL 테스트용 서비스 컨테이너 설정
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: Rlatldms!2!3
          MYSQL_DATABASE: leafresh
        options: >-
          --health-cmd="mysqladmin ping -h 127.0.0.1 --protocol=tcp"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    defaults:
      run:
        working-directory: ./

    steps:
      - uses: actions/checkout@v3              # 코드 체크아웃

      - name: Set up JDK 21                    # Java 21 환경 설정
        uses: actions/setup-java@v3
        with:
          distribution: 'oracle'
          java-version: 21

      - name: Create .env from secret          # GitHub Secrets로부터 .env 파일 생성
        run: echo "${{ secrets.ENV_PROD_FILE }}" > .env

      - name: Build Spring Boot App            # Spring Boot JAR 빌드
        run: ./gradlew bootJar

      - name: Start Spring Boot App with env   # .env 환경변수로 앱 실행 및 헬스체크
        run: |
          export $(grep -v '^#' .env | xargs)
          nohup java -jar build/libs/*.jar > app.log 2>&1 &

          for i in {1..30}; do
            if curl -s http://localhost:8080/actuator/health | grep UP > /dev/null; then
              echo "Spring Boot is UP"
              break
            fi
            echo "Waiting for Spring Boot..."
            sleep 2
          done

      - name: Integration Test                 # 통합 테스트 API 호출
        run: |
          curl -v http://localhost:8080/api/challenges/group/categories || (
            echo "API call failed"
            cat app.log
            exit 1
          )

      - name: Stop Spring Boot App             # 테스트 종료 후 앱 중지
        run: pkill -f 'java -jar'

  build-dev:                                    # develop 브랜치에서 Docker 이미지 빌드 및 푸시
    name: Build and Push Backend Docker (develop only)
    needs: unit-test
    if: |
      (github.event_name == 'push' && github.ref == 'refs/heads/develop') ||
      (github.event_name == 'pull_request' && github.event.pull_request.merged == true && github.base_ref == 'develop')

    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3              # 소스코드 체크아웃

      - name: Build JAR with Gradle            # JAR 빌드
        run: ./gradlew build

      - name: Set up Docker Buildx             # Docker Buildx 설정
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container

      - name: Login to Docker Hub              # Docker Hub 로그인
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Build and Push Docker Image      # Docker 이미지 빌드 및 푸시
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: jchanho99/backend-dev:latest
          cache-from: type=gha,scope=build-backend-dev
          cache-to: type=gha,mode=max,scope=build-backend-dev

  build-prod:                                   # main 브랜치에서 Docker 이미지 빌드 및 푸시
    name: Build and Push Backend Docker (main only)
    needs: integration-test
    if: github.event_name == 'pull_request' && github.event.pull_request.merged == true && github.base_ref == 'main'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./
    steps:
      - uses: actions/checkout@v3              # 코드 체크아웃

      - name: Set up Docker Buildx             # Docker Buildx 설정
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container

      - name: Login to Docker Hub              # Docker Hub 로그인
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Build and Push Docker Image      # Docker 이미지 빌드 및 푸시
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: jchanho99/backend-prod:latest
          cache-from: type=gha,scope=build-backend-prod
          cache-to: type=gha,mode=max,scope=build-backend-prod

  sync-env-to-secret-manager:                   # .env 파일을 GCP Secret Manager에 동기화
    name: Upload .env to Secret Manager
    if: github.event_name == 'push' && (github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/main')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository              # 저장소 코드 가져오기
        uses: actions/checkout@v3

      - name: Setup gcloud CLI                 # GCP 인증 및 gcloud 설정
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true

      - name: Select environment and write .env file   # 브랜치에 따라 ENV 선택
        run: |
          if [[ "${GITHUB_REF##*/}" == "main" ]]; then
            echo "${{ secrets.DOCKER_PROD }}" > .env
            echo "Using production .env"
            echo "env-prod" > secret_name.txt
          else
            echo "${{ secrets.DOCKER_LOCAL }}" > .env
            echo "Using development .env"
            echo "env-dev" > secret_name.txt
          fi

      - name: Push .env to Secret Manager      # Secret Manager에 .env 저장 또는 업데이트
        run: |
          SECRET_NAME=$(cat secret_name.txt)

          if gcloud secrets describe "$SECRET_NAME" >/dev/null 2>&1; then
            echo "Secret $SECRET_NAME exists, adding new version..."
            gcloud secrets versions add "$SECRET_NAME" --data-file=.env
          else
            echo "Secret $SECRET_NAME does not exist, creating..."
            gcloud secrets create "$SECRET_NAME" --data-file=.env --replication-policy=automatic
          fi
          
