name: Backend CI

on:
  push:
    branches: [ "develop", "main" ]
  pull_request:
    branches: [ "develop", "main" ]

jobs:
  unit-test:
    name: Unit Test
    if: github.event_name == 'pull_request' && github.base_ref == 'develop'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up JDK 21                  # JDK 21 환경 세팅
        uses: actions/setup-java@v3
        with:
          distribution: 'oracle'
          java-version: 21
      
      - name: Grant Gradle permission        # Gradle 실행환경 구성
        run: chmod +x ./gradlew
      - name: Cache Gradle dependencies
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('build.gradle.kts', 'build.gradle') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Run Tests                      # unit test 실행
        run: ./gradlew test

  integration-test:
    name: Integration Test
    if: github.event_name == 'pull_request' && github.base_ref == 'main'
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: Rlatldms!2!3
          MYSQL_DATABASE: leafresh
          MYSQL_ALLOW_EMPTY_PASSWORD: false
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h localhost"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
    env:
      SPRING_DATASOURCE_URL: jdbc:mysql://localhost:3306/leafresh
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: Rlatldms!2!3
      SPRING_DATASOURCE_DRIVER_CLASS_NAME: com.mysql.cj.jdbc.Driver
      SPRING_JPA_HIBERNATE_DDL_AUTO: create-drop
      SPRING_JPA_SHOW_SQL: true
    defaults:
      run:
        working-directory: ./
    
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 21                  # JDK 21 환경 세팅
        uses: actions/setup-java@v3
        with:
          distribution: 'oracle'
          java-version: 21

      - name: Build Spring Boot App          # jar 실행 후 대기
        run: ./gradlew bootJar
      - name: Start Spring Boot App
        run: |
          TIMEOUT=60
          sleep $TIMEOUT;

      - name: Integration Test               # 통합 테스트 진행 후 종료
        run: |
          curl -v http://localhost:8080/api/challenges/group/categories || (
            echo "❌ API call failed"; 
            cat app.log;
            exit 1
          )
      - name: Stop Spring Boot App
        run: pkill -f 'java -jar'

  build-dev:
    name: Build and Push Backend Docker (develop only)
    needs: unit-test
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Build JAR with Gradle
        run: ./gradlew build
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container 
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}
      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: jchanho99/backend-dev:latest
          cache-from: type=gha,scope=build-backend-dev
          cache-to: type=gha,mode=max,scope=build-backend-dev


  build-prod:
    name: Build and Push Backend Docker (main only)
    needs: integration-test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./
    steps:
      - uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container 
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}}
      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: jchanho99/backend-prod:latest
          cache-from: type=gha,scope=build-backend-prod
          cache-to: type=gha,mode=max,scope=build-backend-prod

  sync-env-to-secret-manager:
    name: Upload .env to Secret Manager
    if: github.event_name == 'push' && (github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/main')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup gcloud CLI
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true

      - name: Select environment and write .env file
        run: |
          if [[ "${GITHUB_REF##*/}" == "main" ]]; then
            echo "${{ secrets.ENV_PROD_FILE }}" > .env
            echo "Using production .env"
            echo "env-prod" > secret_name.txt
          else
            echo "${{ secrets.ENV_DEV_FILE }}" > .env
            echo "Using development .env"
            echo "env-dev" > secret_name.txt
          fi

      - name: Push .env to Secret Manager
        run: |
          SECRET_NAME=$(cat secret_name.txt)

          # Check if secret exists
          if gcloud secrets describe "$SECRET_NAME" >/dev/null 2>&1; then
            echo "Secret $SECRET_NAME exists, adding new version..."
            gcloud secrets versions add "$SECRET_NAME" --data-file=.env
          else
            echo "Secret $SECRET_NAME does not exist, creating..."
            gcloud secrets create "$SECRET_NAME" --data-file=.env --replication-policy=automatic
          fi

